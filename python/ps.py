######################## 수 표현 ########################
#### 지수표현들

# 10억의 지수 표현 방식
a = 1e9
print(a)

#752.5
a = 75.25e1
print(a)

#3.954
a = 3954e-3 #3954 * 10^(-3)
print(a)

#### 반올림 (IEEE754 부동소수점 표현의 한계를 대충 극복)
#123.46
print(round(123.456,2)) #소수 셋째(2+1)번쨰 자리에서 반올림. 즉 둘쨰자리까지 표현

#### 수 자료형의 연산
print(a/b) #그저 나누기.
print(a%b) #나머지
print(a//b) #몫
print(a**b) #a^b (거듭제곱)


######################## 리스트 자료형 ########################
# 여러 개의 데이터를 연속적으로 담아 처리하기 위해 사용할 수 있음. 내부적으로는 배열과 동일. 연결 리스트의 자료구조 기능도 포함. append(), remove() 메서드 지원
# c++의 STL vector와 비슷한 경향이 있다.

#### 리스트 만들기
a = [1,2,3,4,5,6,7,8,9]
print(a)

#인덱스 4, 즉 다섯 번쨰 원소에 접근
print(a[4])

#빈 리스트 선언 방법 1)
a = list()
print(a)

#빈 리스트 선언 방법 2)
a = []
print(a)

####실전형 리스트 선언. [크기가 N인 1차원 리스트 모두 0으로 초기화 C++의 memset느낌인가]
n = 10
a = [0] * n
print(a)

####리스트의 인덱싱과 슬라이싱
a = [1,2,3,4,5,6,7,8,9]
#뒤에서 첫 번쨰 원소 출력
print(a[-1])

#뒤에서 세 번쨰 원소 출력
print(a[-3])

#네 번쨰 원소 값 변경
a[3] = 7
print(a)

#두 번쨰 원소부터 네 번쨰 원소까지 출력
print(a[1:4]) # a[1] 부터 a[4-1]까지

#### 리스트 컴프리헨션
# 리스트를 초기화 하는 방법 중 하나. - 대괄호 안에 조건문과 반목문을 넣는 방식으로 리스트를 초기화

# 0부터 19까지의 수 중에서 홀수만 포함하는 리스트
array = [i for i in range(20) if i%2==1]
print(array)

#1부터 9까지의 수의 제곱 값을 포함하는 리스트
array = [i*i for i in range(1,10)]
print(array)

#### 실전형 2차원 리스트 초기화.
n = 3
m = 4
array = [[0]*m for _ in range(n)] #여기서 _(언더바) 는 반복을 수행하되, 반복을 위한 변수의 값을 무시하고자 할 떄 사용.
print(array) #결과값 [[0,0,0,0],[0,0,0,0],[0,0,0,0]]
#### 주의 해야할 2차원 리스트 초기화 (리스트 컴프리헨션을 이용해야 하는 이유?) ####
n = 3
m = 4
array = [[0]*m]*n
print(array)
# [[0,0,0,0],[0,0,0,0],[0,0,0,0]]
array[1][1] = 5
print(array)
# [[0,5,0,0],[0,5,0,0],[0,5,0,0]] 
# 내부적으로 포함된 3개의 리스트가 모두 동일한 객체에 대한 3개의 레퍼런스로 인식되기 때문이다. 따라서 특정한 크기를 가지는 2차원 리스트를 초기화 할 떄에는 리스트 컴프리헨션을 이용.

####리스트 관련 기타 메서드
a = [1,4,3]
print("기본 리스트 : ", a)
#리스트에 원소 삽입
a.append(2) # a = [1,4,3,2] 당연히 시간복잡도는 O(1)
#오름차순 정렬
a.sort()
print("오름차순 정렬:",a) # a = [1,2,3,4] 시간복잡도 O(NlogN)
#내림차순 정렬
a.sort(reverse=True)
print("내림차순 정렬:",a) # a = [4,3,2,1]
#리스트 원소 뒤집기
a.reverse()
print("원소 뒤집기 :",a) # a = [1,2,3,4]
#특정 인덱스에 데이터 추가
a.insert(2,3)
print("인덱스 2에 3추가:",a) # a =[1,2,3,3,4] 시간복잡도 O(N) 남발하면 시간초과 될 수 있음.
#특정 값인 데이터 개수 세기
print("값이 3인 데이터 개수:",a.count(3))
#특정 값 데이터 삭제
a.remove(1)
print("값이 1인 데이터 삭제:",a)
#특정한 값의 원소를 모두 제거하려먼 어떻게 해야할까?
a = [1,2,3,4,5,5,5]
remove_set = {3,5}
#remove_set 에 포함되지 않은 값만을 저장
result = [i for i in a if i not in remove_set] 
print(result)